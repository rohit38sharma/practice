System Design Knowledge Question:

    You've developed a web app for use by home cooks to store their favorite recipes and create shopping lists of the ingredients that the recipes need. Each recipe's ingredients list is stored in our central database.

    The service has recently been adopted by the restaurant industry and is exploding in popularity. Unfortunately, our service has been struggling to keep up with this traffic.

    What are some possible reasons for the slowdown of the service and what improvements could we make?




    We are designing a mobile app for children, where they draw a character and our app animates it. These characters are then placed into various interactive environments.

    The animation process for the characters is fairly processor intensive so we will use a server farm for this. After processing, the server sends the animated result back to the app. The interactive environments are all downloadable from the same server farm.

    What are some things we can do to minimize the cost of this server farm?





    We run a web service that aggregates statistics for sporting events. This service depends on third-party APIs to receive real-time and historical data for our statistics.

    Unfortunately, one of these APIs has recently become unreliable, with frequent outages, which has reduced the quality of our statistics.

    What are some ways we could update our system to minimize the impact of these outages?




    You have been hired by a company which builds smart freezers. Previous versions of these devices sent data to a computer using an ethernet connection, and this computer was responsible for calculations, instructions, and data logging.

    For the newest models we've decided to make the systems autonomous, using a low cost microcontroller inside of the appliance, with no network or computer required.

    As we port the functionality, what are some important considerations we need to keep in mind?





    We are working on a mobile app that allows users to share videos of up to 1 minute in length with other users. Each video has a configurable time to live, which can range from 5 minutes to 24 hours, and the video is immediately deleted at the end of that time.

    The system has been extremely popular in its first year, so we need to scale for the coming year. What information would you require to predict the resource costs for the next year?




Coding Questions:

/*

We are playing a game where the player needs to follow instructions to find a treasure.

There are multiple rooms, aligned in a straight line, labeled sequentially from 0. Each room contains one instruction, given as a positive integer.

An instruction directs the player to move forward a specific number of rooms. The last instruction is "9" by convention, and can be ignored (there's no room to move after the last room).

The player starts the game in room number 0 and has to reach the treasure which is in the last room. The player is given an amount of money to start the game with. She must use this money wisely to get to the treasure as fast as possible.

The player can follow the instruction or pay $1 to change the value of the instruction by one. For example, for $1, the instruction "2" may be changed to "1" or "3". A player cannot pay more than $1 to change the value of an instruction by more than one unit.

Write a function that takes a list of instructions and a total amount of money as input and returns the minimum number of instructions needed to reach the treasure room, or None/null/-1 if the treasure cannot be reached.

Examples
Note: The updated instructions are marked with *.

Example 1

instructions_2_1 =  [1, 1, 1, 9]

With $0, the player would follow 3 instructions:
Instructions:   [  1,  1,  1,  9]
Itinerary:      [  1,  1,  1,  9]
                   ^   ^   ^   ^

With $1, the player would reach the treasure in 2 instructions: she could change, for example, the first instruction to 2.
Instructions:   [  1,  1,  1,  9]
Itinerary:      [ *2,  1,  1,  9]
                   ^       ^   ^

Example 2

instructions_2_2 = [1, 1, 2, 9]

With $0 as the initial amount, the treasure is not reachable.

With $1 (or more) as the initial amount, the treasure can be reached in 2 instructions.
Instructions:   [  1,  1,  2,  9]
Itinerary:      [  1, *2,  2,  9]
                   ^   ^       ^

Example 3

instructions_2_3  =  [2, 4, 1, 2, 10, 2, 3, 1, 9]

With $0, the treasure can be found in 5 instructions:
Instructions:   [  2,  4,  1,  2,  10,  2,  3,  1,  9]
Itinerary:      [  2,  4,  1,  2,  10,  2,  3,  1,  9]
                   ^       ^   ^        ^       ^   ^

With $1, the treasure can be found in 4 instructions:
Instructions:   [  2,  4,  1,  2,  10,  2,  3,  1,  9]
Itinerary:      [ *1,  4,  1,  2,  10,  2,  3,  1,  9]
                   ^   ^                ^       ^   ^

With $2,the treasure can be found in 3 instructions:
Instructions:   [  2,  4,  1,  2,  10,  2,  3,  1,  9]
Itinerary:      [ *1,  4,  1,  2,  10, *3,  3,  1,  9]
                   ^   ^                ^           ^

All the test cases:

instructions_2_1 = [1, 1, 1, 9]
instructions_2_2 = [1, 1, 2, 9]
instructions_2_3 = [2, 4, 1, 2, 10, 2, 3, 1, 9]

find_treasure(instructions_2_1, 0) => 3
find_treasure(instructions_2_1, 1) => 2

find_treasure(instructions_2_2, 0) => None or Null
find_treasure(instructions_2_2, 1) => 2
find_treasure(instructions_2_2, 2) => 2

find_treasure(instructions_2_3, 0) => 5
find_treasure(instructions_2_3, 1) => 4
find_treasure(instructions_2_3, 2) => 3

Complexity Analysis variables:
I: number of instructions
M: money


*/

import java.io.*;
import java.util.*;
import javafx.util.Pair;

public class Solution {
  public static void main(String[] argv) {


    int[] instructions_2_1 = {1, 1, 1, 9};
    int[] instructions_2_2 = {1, 1, 2, 9};
    int[] instructions_2_3 = {2, 4, 1, 2, 10, 2, 3, 1, 9};


    // List<String> tresureRooms = findTreasureRooms(instructions_2, treasure_rooms_3);

    // for(String room : tresureRooms){
    //   System.out.println(room);
    // }

  }

//Q1
  private static List<String> findTreasureRooms(String[][] instructions, String[] treasure_rooms){
      List<String> tresureRooms = new ArrayList<>();

      Map<String, Integer> inwards = new HashMap<>();
      Map<String, List<String>> outwards = new HashMap<>();

      Set<String> uniqueTreasureRooms = new HashSet<>();
      for(String room : treasure_rooms){
        uniqueTreasureRooms.add(room);
      }

      for(String[] instruction : instructions){
          String source = instruction[0];
          String dest = instruction[1];
          if(!source.equals(dest)){
              inwards.put(dest, inwards.getOrDefault(dest, 0) + 1);
          }
          if(uniqueTreasureRooms.contains(dest)){
              outwards.computeIfAbsent(source, k -> new ArrayList<>()).add(dest);
          }
      }

      for(String room : inwards.keySet()){
          if(inwards.get(room) >= 2){
              List<String> curoutwards = outwards.getOrDefault(room, new ArrayList<>());
              if(curoutwards.size() > 0){
                tresureRooms.add(room);
              }
          }
      }

      return tresureRooms;
  }

//Q2
  private static boolean reachToLast(int[] instruction, int dollar){
     return helper(instruction, dollar, 0, instruction.length);
  }

  private static boolean helper(int[] instruction, int dollar, int i, int n){
      if(i >= n-1)
        return true;

      int cur = instruction[i];
      boolean path1 = helper(instruction, dollar, i + cur , n);
      if(path1)
        return true;
      if(dollar > 0){
        boolean path2 = helper(instruction, dollar-1, i + cur + 1 , n);
        boolean path3 = helper(instruction, dollar-1, i + cur - 1 , n);
        return path2 || path3;
      }
      return false;
  }
}


